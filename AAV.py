# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'choreograph.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
################################ user prompts ####################################################
print("\nWelcome to the ATOMDANCE AUDIO VISUALIZER")
print("(choreographic/musical analysis of protein interaction dynamics)")
print("\nThis software was produced by the Babbitt and Fokoue Lab at RIT in 2024")
print("This software is offered freely without guarantee under a GPL 3.0 license")
print("\nBefore we open the GUI, please enter the names of your 2 structure files below")
inp1 = input("\nEnter name of bound complex file (e.g. bound_complex NOT bound_complex.pdb)\n" )
if(inp1 == ""):
    inp1 = "1cdw_bound"
    #inp1 = "1ubq"
inp2 = input("\nEnter unbound reference file (e.g. unbound_protein NOT unbound_protein.pdb)\n" )
if(inp2 == ""):
    inp2 = "1cdw_unbound"
    #inp2 = "1ubq_2nd"
print("input structure file names for these MD simulations are...")
print(inp1)
print(inp2)
inp3 = input("\nAre MD simulations already done (yes or no) (default is no)\n" )
if(inp3 == ""):
    inp3 = "no"
    print(inp3)
if(inp3 == "yes"):
    print("reading MD control files and creating analysis control files")
if(inp3 == "no"):
    # enter force fields
    ff1 = input("\nEnter name of protein force field (default is leaprc.protein.ff14SB)\n" )
    if(ff1 == ""):
        ff1 = "leaprc.protein.ff14SB"
        print(ff1)
    ff2 = input("\nEnter name of DNA force field if needed (default=null)(e.g. leaprc.DNA.OL15)\n" )
    if(ff2 == "leaprc.DNA.OL15"):
        dna_option = "yes"
    if(ff2 == ""): 
        #dna_option = "no" # disabled for testing
        dna_option = "yes"
        ff2 = "leaprc.DNA.OL15"
    ff3 = input("\nEnter name of RNA force field if needed (default=null)(e.g. leaprc.RNA.ROC)\n" )
    if(ff3 == "leaprc.RNA.ROC"):
        rna_option = "yes"
    if(ff3 == ""):
        rna_option = "no"
    ff4 = input("\nEnter name of general small molecule force field if needed (default=null)(e.g. leaprc.gaff2) This option will activate antechamber/sqm during MD prep unless it is left null.\n" )
    if(ff4 == "leaprc.gaff2"):
        antechamber_option = "yes"
    if(ff4 == ""):
        antechamber_option = "no"
    intgr = input("\nEnter type of integrator (default is Langevin)(options are Langevin, aMD, or Verlet\n" )
    if(intgr == ""):
        intgr = "Langevin"
        print(intgr)
    wbox = input("\nEnter size (nm) of water box (default is 12)\n" )
    if(wbox == ""):
        wbox = "12"
        print(wbox)
    # find/enter path to forcefield files
    ff_path = input("\nEnter path to force field files (e.g. /home/USERNAME/anaconda3/envs/atomdance/dat/leap/cmd/)\n" )
    if(ff_path == ""):
        ff_path = "/home/gabsbi/anaconda3/envs/atomdance/dat/leap/cmd/"
        print(ff_path)
###################################################################################################


####################################### GUI initiation ############################################
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setEnabled(True)
        Dialog.resize(575, 842)
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setGeometry(QtCore.QRect(300, 760, 231, 51))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 10, 131, 27))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.runANALYSES)
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(160, 10, 61, 27))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.closeIt)
        self.frame_2 = QtWidgets.QFrame(Dialog)
        self.frame_2.setGeometry(QtCore.QRect(10, 580, 551, 161))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        #vibrational freq extraction
        self.checkBox_2 = QtWidgets.QCheckBox(self.frame_2)
        self.checkBox_2.setGeometry(QtCore.QRect(10, 10, 531, 24))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_2.setChecked(True)
        # choreographic analysis
        self.checkBox = QtWidgets.QCheckBox(self.frame_2)
        self.checkBox.setGeometry(QtCore.QRect(10, 70, 551, 24))
        self.checkBox.setObjectName("checkBox")
        self.checkBox.setChecked(True)
        # kernel learning for MMD sites
        self.checkBox_3 = QtWidgets.QCheckBox(self.frame_2)
        self.checkBox_3.setGeometry(QtCore.QRect(10, 40, 551, 24))
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_3.setChecked(True)
        #create sound file
        self.checkBox_4 = QtWidgets.QCheckBox(self.frame_2)
        self.checkBox_4.setGeometry(QtCore.QRect(10, 100, 551, 24))
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_4.setChecked(True)
        #render movie file
        self.checkBox_5 = QtWidgets.QCheckBox(self.frame_2)
        self.checkBox_5.setGeometry(QtCore.QRect(10, 130, 551, 24))
        self.checkBox_5.setObjectName("checkBox_5")
        self.checkBox_5.setChecked(True)
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(170, 40, 211, 41))
        self.label_2.setTextFormat(QtCore.Qt.RichText)
        self.label_2.setObjectName("label_2")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(10, 10, 551, 161))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("waveform.gif"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(57, 20, 521, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(30, 140, 521, 20))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(100, 310, 371, 20))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(40, 410, 181, 18))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(Dialog)
        self.label_7.setGeometry(QtCore.QRect(270, 410, 301, 20))
        self.label_7.setObjectName("label_7")
        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setGeometry(QtCore.QRect(10, 330, 251, 71))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_2.setGeometry(QtCore.QRect(270, 330, 291, 71))
        self.textEdit_2.setObjectName("textEdit_2")
        self.frame_3 = QtWidgets.QFrame(Dialog)
        self.frame_3.setGeometry(QtCore.QRect(10, 750, 251, 80))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_3.setGeometry(QtCore.QRect(40, 10, 181, 27))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.runCPPTRAJ)
        self.progressBar = QtWidgets.QProgressBar(self.frame_3)
        self.progressBar.setGeometry(QtCore.QRect(10, 50, 231, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.frame_4 = QtWidgets.QFrame(Dialog)
        self.frame_4.setGeometry(QtCore.QRect(0, 440, 571, 131))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.lineEdit = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit.setGeometry(QtCore.QRect(290, 100, 141, 26))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit_2.setGeometry(QtCore.QRect(280, 10, 81, 26))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit_3.setGeometry(QtCore.QRect(10, 100, 81, 26))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit_4.setGeometry(QtCore.QRect(10, 70, 81, 26))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit_5.setGeometry(QtCore.QRect(10, 40, 81, 26))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit_6.setGeometry(QtCore.QRect(280, 40, 81, 26))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit_7.setGeometry(QtCore.QRect(280, 70, 81, 26))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.label_8 = QtWidgets.QLabel(self.frame_4)
        self.label_8.setGeometry(QtCore.QRect(30, 0, 201, 31))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.frame_4)
        self.label_9.setGeometry(QtCore.QRect(100, 40, 181, 18))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.frame_4)
        self.label_10.setGeometry(QtCore.QRect(100, 70, 181, 18))
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.frame_4)
        self.label_11.setGeometry(QtCore.QRect(100, 100, 181, 18))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.frame_4)
        self.label_12.setGeometry(QtCore.QRect(370, 10, 211, 18))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.frame_4)
        self.label_13.setGeometry(QtCore.QRect(370, 40, 201, 18))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.frame_4)
        self.label_14.setGeometry(QtCore.QRect(370, 70, 201, 18))
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.frame_4)
        self.label_15.setGeometry(QtCore.QRect(440, 100, 131, 18))
        self.label_15.setObjectName("label_15")
        self.frame_5 = QtWidgets.QFrame(Dialog)
        self.frame_5.setGeometry(QtCore.QRect(270, 229, 251, 71))
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame_5)
        self.pushButton_4.setGeometry(QtCore.QRect(40, 10, 181, 27))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.runMD)
        self.progressBar_2 = QtWidgets.QProgressBar(self.frame_5)
        self.progressBar_2.setGeometry(QtCore.QRect(10, 40, 231, 23))
        self.progressBar_2.setProperty("value", 0)
        self.progressBar_2.setObjectName("progressBar_2")
        self.label_16 = QtWidgets.QLabel(Dialog)
        self.label_16.setGeometry(QtCore.QRect(10, 240, 221, 20))
        self.label_16.setObjectName("label_16")
        self.textEdit_3 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_3.setGeometry(QtCore.QRect(10, 180, 191, 51))
        self.textEdit_3.setObjectName("textEdit_3")
        # use two GPUs
        self.checkBox_6 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_6.setGeometry(QtCore.QRect(30, 270, 201, 24))
        self.checkBox_6.setObjectName("checkBox_6")
        self.checkBox_6.setChecked(False)
        self.horizontalSlider = QtWidgets.QSlider(Dialog)
        self.horizontalSlider.setGeometry(QtCore.QRect(240, 180, 160, 18))
        self.horizontalSlider.setMinimum(1)
        self.horizontalSlider.setMaximum(20)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider_2 = QtWidgets.QSlider(Dialog)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(240, 200, 160, 18))
        self.horizontalSlider_2.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_2.setMinimum(1)
        self.horizontalSlider_2.setMaximum(20)
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.label_17 = QtWidgets.QLabel(Dialog)
        self.label_17.setGeometry(QtCore.QRect(410, 180, 161, 18))
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(Dialog)
        self.label_18.setGeometry(QtCore.QRect(410, 200, 171, 20))
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(Dialog)
        self.label_19.setGeometry(QtCore.QRect(210, 180, 41, 20))
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(Dialog)
        self.label_20.setGeometry(QtCore.QRect(210, 200, 41, 20))
        self.label_20.setObjectName("label_20")
        
        # hard code inputs
        self.lineEdit.setText("/usr/lib/ucsf-chimerax/bin/")
        self.lineEdit_2.setText("179") # sites
        self.lineEdit_3.setText("3") # visual frames per movie
        self.lineEdit_4.setText("100") # MD frames per subsample
        self.lineEdit_5.setText("40") # subsamples
        self.lineEdit_6.setText("") # N terminal start positions
        self.lineEdit_7.setText("1") # protein chain start position
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "ATOMDANCE AV"))
        self.pushButton_2.setText(_translate("Dialog", "run analyses"))
        self.pushButton.setText(_translate("Dialog", "exit"))
        self.checkBox_2.setText(_translate("Dialog", "vibrational frequency extraction - each amino acid (pitch/timbre)"))
        self.checkBox.setText(_translate("Dialog", "choregraphic analysis - ID coordinated amino acid groups (choirs)"))
        self.checkBox_3.setText(_translate("Dialog", "kernel learning - ID time sequences for functional sites (melody) "))
        self.checkBox_4.setText(_translate("Dialog", "generate sound file from the protein interaction dynamics"))
        self.checkBox_5.setText(_translate("Dialog", "render movie (with sound) from the protein interaction dynamics"))
        self.label_3.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:12pt; color:#ffff7f;\">ATOMDANCE AUDIO VISUALIZER - BabbittLab@RIT</span></p></body></html>"))
        self.label_4.setText(_translate("Dialog", "<html><head/><body><p><span style=\" color:#55ffff;\">choreographic and musical analysis of protein interaction dynamics</span></p></body></html>"))
        self.label_5.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">structure, topology, and trajectory files</span></p></body></html>"))
        self.label_6.setText(_translate("Dialog", "<html><head/><body><p><span style=\" color:#aa0000;\">comparative query files</span></p></body></html>"))
        self.label_7.setText(_translate("Dialog", "<html><head/><body><p><span style=\" color:#aa0000;\">comparative reference files (unbound)</span></p></body></html>"))
        self.textEdit.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Sans Serif\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">%s.pdb</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">wat_%s.prmtop</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">prod_%s.nc</p></body></html>" % (inp1,inp1,inp1)))
        self.textEdit_2.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Sans Serif\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">%s.pdb</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">wat_%s.prmtop</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">prod_%s.nc</p></body></html>"% (inp2,inp2,inp2)))
        self.pushButton_3.setText(_translate("Dialog", "run MD sampling"))
        self.label_8.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">analytic parameters</span></p></body></html>"))
        self.label_9.setText(_translate("Dialog", "<html><head/><body><p>subsamples/ns</p></body></html>"))
        self.label_10.setText(_translate("Dialog", "<html><head/><body><p>MD frames/subsample</p></body></html>"))
        self.label_11.setText(_translate("Dialog", "<html><head/><body><p>visual frames/ns(movie)</p></body></html>"))
        self.label_12.setText(_translate("Dialog", "<html><head/><body><p>number of protein sites</p></body></html>"))
        self.label_13.setText(_translate("Dialog", "<html><head/><body><p>multi-chain N terminals</p></body></html>"))
        self.label_14.setText(_translate("Dialog", "<html><head/><body><p>starting index on protein</p></body></html>"))
        self.label_15.setText(_translate("Dialog", "<html><head/><body><p>chimerax path</p></body></html>"))
        self.pushButton_4.setText(_translate("Dialog", "run MD simulations"))
        self.label_16.setText(_translate("Dialog", "<html><head/><body><p><span style=\" color:#aa0000;\">initial structure (.pdb) files</span></p></body></html>"))
        self.textEdit_3.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Sans Serif\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">%s.pdb</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">%s.pdb</p></body></html>") % (inp1,inp2))
        self.checkBox_6.setText(_translate("Dialog", "use 2 available GPU\'s"))
        self.horizontalSlider.setWhatsThis(_translate("Dialog", "<html><head/><body><p>equilibrationSlider</p></body></html>"))
        self.horizontalSlider_2.setWhatsThis(_translate("Dialog", "<html><head/><body><p>productionSlider</p></body></html>"))
        self.label_17.setText(_translate("Dialog", "<html><head/><body><p>20ns equilibration</p></body></html>"))
        self.label_18.setText(_translate("Dialog", "<html><head/><body><p>20ns production</p></body></html>"))
        self.label_19.setText(_translate("Dialog", "<html><head/><body><p>1ns</p></body></html>"))
        self.label_20.setText(_translate("Dialog", "<html><head/><body><p>1ns</p></body></html>"))

############################################################################################################

######################################### subroutines ######################################################
    def closeIt(self):
        print("ATOMDANCE audio visualzer program closed")
        sys.exit(app.exec_())
    
    def runMD(self):
        import time
        print("starting MD simulations")
        eq_len = self.horizontalSlider.value()
        print("length of MD equilibration run = %s ns" % eq_len)
        prod_len = self.horizontalSlider_2.value()
        print("length of MD production run = %s ns" % prod_len)
                    
        # write control files for analyses
        print("writing control file")
        n_frames = 5000*int(prod_len) # MD frames/nanosecond
        n_subsamples = self.lineEdit_5.text()
        #print(n_subsamples)
        frs_subsample = self.lineEdit_4.text()
        #print(frs_subsample)
        m_frames = self.lineEdit_3.text()
        #print(n_frames)
        frs_total = n_frames # MD script generates 5000 frames/nanosecond
        #print(frs_total)
        frs_usable = int(frs_total)-int(frs_subsample) - 1
        #print(frs_usable)
        n_chains = self.lineEdit_6.text()
        #print(n_chains)
        n_sites = self.lineEdit_2.text()
        #print(n_sites)
        start_site = self.lineEdit_7.text()
        #print(start_site)
        chx_path = self.lineEdit.text()
        #print(chx_path)
        query_list = self.textEdit.toPlainText()
        #print(query_list)
        query_list = str.split(query_list, "\n")
        #print(query_list)
        query_pdb = query_list[0]
        query_id = query_pdb[:-4]
        query_top = query_list[1]
        query_traj = query_list[2]
        reference_list = self.textEdit_2.toPlainText()
        #print(reference_list)
        reference_list = str.split(reference_list, "\n")
        #print(reference_list)
        reference_pdb = reference_list[0]
        reference_id = reference_pdb[:-4]
        reference_top = reference_list[1]
        reference_traj = reference_list[2]
        
        # analyses to run
        if self.checkBox_2.isChecked() == True:
            vibfreq = "yes"
        else:
            vibfreq = "no"
        if self.checkBox_3.isChecked() == True:
            discrepancy = "yes"
        else:
            discrepancy = "no"
        if self.checkBox.isChecked() == True:
            coordination = "yes"
        else:
            coordination = "no"
        if self.checkBox_4.isChecked() == True:
            sound = "yes"
        else:
            sound = "no"
        if self.checkBox_5.isChecked() == True:
            movie = "yes"
        else:
            movie = "no"
        if(self.checkBox_6.isChecked() == True):
            print("2 GPU cards will be used to run MD on both proteins simultaneously")
            n_gpu = "2"
        if(self.checkBox_6.isChecked() == False):
            print("1 GPU card will be used to run MD on both proteins sequentially")
            n_gpu = "1"
        
        # write file
        f = open("./AAV.ctl", "w") 
        f.write("queryID,%s,#pdb id for query structure\n" % query_id)
        f.write("referenceID,%s,#pdb id for ref structure\n" % reference_id)
        f.write("queryPDB,%s,#pdb file for query structure\n" % query_pdb)
        f.write("referencePDB,%s,#pdb file for ref structure\n" % reference_pdb)
        f.write("queryTOP,%s,#topology for query structure\n" % query_top)
        f.write("referenceTOP,%s,#topology for ref structure\n" % reference_top)
        f.write("queryTRAJ,%s,#trajectory for query structure\n" % query_traj)
        f.write("referenceTRAJ,%s,#trajectory for ref structure\n" % reference_traj)
        f.write("subsamples,%s,#number of subsamples\n" % n_subsamples)
        f.write("frame_size,%s,#number of MD frames per subsample\n" % frs_subsample)
        f.write("m_frames,%s,#number of visual frames per nanosecond in movie file\n" % m_frames)
        f.write("n_frames,%s,#total number of MD frames in the production MD run\n" % n_frames)
        f.write("ttl_frames,%s,#total number of usable MD frames in the production MD run\n" % frs_usable)
        f.write("eq_len,%s,#length of equilibration (ns)\n" % eq_len)
        f.write("prod_len,%s,#length of production (ns)\n" % prod_len)
        f.write("n_terminals,%s,#n terminal locations for multi-chain PDB\n" % n_chains)
        f.write("length,%s,#total length of protein\n" % n_sites)
        f.write("start,%s,#Nterminal AA starts at position...\n" % start_site)
        f.write("chimerax,%s,#path to chimerax binary\n" % chx_path)
        f.write("n_gpus,%s,#n gpu's to use\n" % n_gpu)
        
        f.write("vibfreq,%s,#run vibrational frequency analysis\n" % vibfreq)
        f.write("discrepancy,%s,#run MMD analysis\n" % discrepancy)
        f.write("coordination,%s,#run coordinated dynamics analysis\n" % coordination)
        f.write("sound,%s,#create sound file\n" % sound)
        f.write("movie,%s,#render movie file\n" % movie)
        f.close()
        
        eq_steps = int(eq_len)*1000000
        prod_steps = int(prod_len)*1000000
        eq_steps_vibfreq = 10000
        prod_steps_vibfreq = 10000
        
        # write control files for MD simulations
        out = open("./MDr_aav.ctl", "w") 
        out.write("pdbID,%s,#pdb id for first structure\n" % reference_pdb)
        out.write("ff1,%s,#protein force field\n" % ff1)
        if(dna_option == "yes"):
            out.write("ff2,%s,#DNA force field\n" % ff2)
        if(rna_option == "yes"):
            out.write("ff3,%s,#RNA force field\n" % ff3)
        if(antechamber_option == "yes"):
            out.write("ff4,%s,#small molecule force field\n" % ff4)
        out.write("box_size,%s,#water box size\n" % wbox)
        out.write("integrator,%s,#integrator\n" % intgr)
        out.write("eq_len,%s,#length of equilibration\n" % eq_steps)
        out.write("prod_len,%s,#length of production run\n" % prod_steps)
        out.write("prod_reps,%s,#sequential replicates of production (frames in the movie)\n" % prod_len)
        out.write("antechamber,%s,#run antechamber\n" % antechamber_option)
        out.write("tleap_path,%s,#path to force field folder\n" % ff_path)
        out.close()
        
        out = open("./MDq_aav.ctl", "w")
        out.write("pdbID,%s,#pdb id for first structure\n" % query_pdb)
        out.write("ff1,%s,#protein force field\n" % ff1)
        if(dna_option == "yes"):
            out.write("ff2,%s,#DNA force field\n" % ff2)
        if(rna_option == "yes"):
            out.write("ff3,%s,#RNA force field\n" % ff3)
        if(antechamber_option == "yes"):
            out.write("ff4,%s,#small molecule force field\n" % ff4)
        out.write("box_size,%s,#water box size\n" % wbox)
        out.write("integrator,%s,#integrator\n" % intgr)
        out.write("eq_len,%s,#length of equilibration\n" % eq_steps)
        out.write("prod_len,%s,#length of production\n" % prod_steps)
        out.write("prod_reps,%s,#sequential replicates of production (frames in the movie)\n" % prod_len)
        out.write("antechamber,%s,#run antechamber\n" % antechamber_option)
        out.write("tleap_path,%s,#path to force field folder\n" % ff_path)
        out.close()
        
        out = open("./MDq_aav_vibfreq.ctl", "w")
        out.write("pdbID,%s,#pdb id for first structure\n" % query_pdb)
        out.write("ff1,%s,#protein force field\n" % ff1)
        if(dna_option == "yes"):
            out.write("ff2,%s,#DNA force field\n" % ff2)
        if(rna_option == "yes"):
            out.write("ff3,%s,#RNA force field\n" % ff3)
        if(antechamber_option == "yes"):
            out.write("ff4,%s,#small molecule force field\n" % ff4)
        out.write("box_size,%s,#water box size\n" % wbox)
        out.write("integrator,%s,#integrator\n" % intgr)
        out.write("eq_len,%s,#length of equilibration\n" % eq_steps_vibfreq)
        out.write("prod_len,%s,#length of production\n" % prod_steps_vibfreq)
        out.write("prod_reps,%s,#sequential replicates of production (frames in the movie)\n" % prod_len)
        out.write("antechamber,%s,#run antechamber\n" % antechamber_option)
        out.write("tleap_path,%s,#path to force field folder\n" % ff_path)
        out.close()
        
        # prep simulations
        # dry and reduce
        cmd = "pdb4amber -i %s -o reduced_%s --dry --reduce \n" % (reference_pdb, reference_pdb)
        os.system(cmd)
        cmd = "pdb4amber -i %s -o reduced_%s --dry --reduce \n" % (query_pdb, query_pdb)
        os.system(cmd)
        # small molecule ligand prep
        if(antechamber_option == "yes"):
            print("starting antechamber - force field modifications for small molecules\n")
            print("\n\n==========================================================================\n")
            print("\nrunning 'antechamber' package...QMMM calculations may take several minutes\n")
            print("note: if this step fails, be sure your ligand PDB comprises ONLY a single unit\n")
            print("note: also be sure to inspect warning messages on the terminal\n\n")
            print("\n============================================================================\n\n")

            print("NOTE: Ligand structure must be single multi atom unit for antechamber If ligand consists of multiple parts or if multiple ligands are used, create a separate PDB file for each part, rerun pdb4amber, make new ctl files, and rerun antechamber for each part. Finally, edit .bat files when running teLeAP to load each ligand or part.  If single atom ions are included in protein structure file then add a line to .bat file that says loadoff atomic_ions.lib and check charges in your mol2 files. \n\n")
            #pdbIDl = "reduced_1yet_ligand.pdb"
            inp = input("PLEASE ENTER NAME OF LIGAND FILE (e.g. 1pdb_ligand.pdb)")
            cmd = "pdb4amber -i %s -o reduced_%s --dry --reduce \n" % (inp, inp)
            os.system(cmd)
            pdbIDl = "reduced_%s" % inp
            print(pdbIDl)
            inp_label = pdbIDl[:-4]
            print(inp_label)
            molIDl = "%s.mol2" % inp_label
            frcmodIDl = "%s.frcmod" % inp_label
            cmd1=("antechamber -i %s -fi pdb -o %s -fo mol2 -c bcc -s 2" % (pdbIDl, molIDl))
            os.system(cmd1)
            print("check scaled quantum mechanical optimizations (close file when done)\n")
            cmd2=("gedit sqm.out\n")
            os.system(cmd2)
            print("running parmchk to test if all parameters required are available")
            cmd3=("parmchk2 -i %s -f mol2 -o %s\n" % (molIDl, frcmodIDl))
            os.system(cmd3)
            #print("open/check mol2 file and then close\n")
            #from chimerax.core.commands import run
            #run(session, "open "+molIDl+"")
            print("check force field modifications file and then close\n")
            cmd4=("gedit %s\n" %(frcmodIDl))
            os.system(cmd4)
            print("\n\nparmchk is completed\n\n")
        # prep topology files
        cmd5=("python3 MD_protein_tleap_aav_query.py\n")
        os.system(cmd5)
        cmd6=("python3 MD_protein_tleap_aav_reference.py\n")
        os.system(cmd6)
        # launch simulations
        if(n_gpu == "1"):
            cmd7=("python3 MD_protein_openMM_aav_query.py\n")
            os.system(cmd7)
            cmd8=("python3 MD_protein_openMM_aav_reference.py\n")
            os.system(cmd8)
            cmd9=("python3 MD_protein_openMM_aav_query_vibfreq.py\n")
            os.system(cmd9)
            
        if(n_gpu == "2"):
            print("\nRUN THE FOLLOWING SIMULTANEOUSLY IN THE THREE NEW TERMINALS\n")
            print("python3 MD_protein_openMM_aav_query.py\n")
            print("python3 MD_protein_openMM_2gpu_aav_reference.py\n")
            print("nvidia-smi -l 5\n")
            print("remember to run 'conda activate atomdance' first\n\n")
            import subprocess
            proc1 = subprocess.Popen(['x-terminal-emulator'])
            proc2 = subprocess.Popen(['x-terminal-emulator'])
            proc3 = subprocess.Popen(['x-terminal-emulator'])
            proc1.wait()
            proc2.wait()
            proc3.wait()
            cmd9=("python3 MD_protein_openMM_aav_query_vibfreq.py\n")
            os.system(cmd9)
            
            
        # setting for loop to set value of progress bar 
        for i in range(101): 
            time.sleep(0.05) 
            # setting value to progress bar 
            self.progressBar_2.setValue(i)
        print("\nMD simulations are complete\n")
    
       
    def runCPPTRAJ(self):
        import time
        # start subsampling
        print("starting trajectory subsampling")
        my_frames = self.horizontalSlider_2.value()*5000
        
        print("setting total number of frames to %s" % my_frames)
        if(my_frames <= 5000):
            cmd9 = "python3 aav_cpptraj_sampler.py"
            os.system(cmd9)
        if(my_frames > 5000):
            cmd9 = "python3 aav_cpptraj_sampler_fast.py"
            os.system(cmd9)
        cmd10 = "python3 aav_cpptraj_sampler_all.py"
        os.system(cmd10)
        # setting for loop to set value of progress bar 
        for i in range(101): 
            time.sleep(0.05) 
            # setting value to progress bar 
            self.progressBar.setValue(i)
        print("\ntrajectory subsampling is complete\n")
        
    def runANALYSES(self):
        print("\nstarting analyses and sound/movie file generation\n")    
        cmd = "python3 aav_analyzer.py"
        os.system(cmd)
        print("\nchoreographic and musical analyses are complete\n")
#########################################################################################################

####################################### main program ####################################################
if __name__ == "__main__":
    import sys
    import os
    import multiprocessing
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
#########################################################################################################